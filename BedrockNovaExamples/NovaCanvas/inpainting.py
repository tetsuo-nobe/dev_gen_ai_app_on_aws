#　必要に応じて pip install Pillow を事前に実行
"""
この例では、Amazon Nova Canvas モデルを使用して、元の画像からインペインティングによって画像を生成する方法を示します。
この例では、マスクプロンプトを使用して、インペインティングを行う領域を指定します。
"""
import base64
import io
import json
import logging
import boto3
import datetime
from PIL import Image
from botocore.config import Config

from botocore.exceptions import ClientError


class ImageError(Exception):
    "Custom exception for errors returned by Amazon Nova Canvas"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_image(model_id, body):
    """
    Generate an image using Amazon Nova Canvas  model on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info(
        "Generating image with Amazon Nova Canvas model %s", model_id)

    bedrock = boto3.client(
        service_name='bedrock-runtime',
        config=Config(read_timeout=300)
    )

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())

    base64_image = response_body.get("images")[0]
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("error")

    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    logger.info(
        "Successfully generated image with Amazon Nova Canvas model %s", model_id)

    return image_bytes


def main():
    """
    Entrypoint for Amazon Nova Canvas example.
    """
    try:
        logging.basicConfig(level=logging.INFO,
                            format="%(levelname)s: %(message)s")

        model_id = 'amazon.nova-canvas-v1:0'

        # ファイルから画像を読み込み、base64文字列としてエンコード
        with open("car-woods.jpg", "rb") as image_file:
            input_image = base64.b64encode(image_file.read()).decode('utf8')

        # タスクタイプに INPAINTING を指定
        body = json.dumps({
            "taskType": "INPAINTING",
            "inPaintingParams": {
                "text": "Change the car to a red sports car.",
                "negativeText": "bad quality, low res",
                "image": input_image,
                "maskPrompt": "car"
            },
            "imageGenerationConfig": {
                "numberOfImages": 1,
                "height": 512,
                "width": 512,
                "cfgScale": 8.0
            }
        })

        image_bytes = generate_image(model_id=model_id,
                                     body=body)
        dt_now = str(datetime.datetime.now())
        with open(f"car-{dt_now}.png", "wb") as f:
            f.write(image_bytes)
        print(f'save to "car-{dt_now}.png".')    

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(
            f"Finished generating image with Amazon Nova Canvas  model {model_id}.")


if __name__ == "__main__":
    main()